version: '3.8'

services:

  broker-service:
    build:
      context: ./../broker-service
      dockerfile: ./../broker-service/broker-service.dockerfile
    restart: always

  authentication-service:
    build:
      context: ./../authentication-service
      dockerfile: ./../authentication-service/authentication-service.dockerfile
    restart: always
    environment:
      DSN: "host=postgres port=5432 user=postgres password=password dbname=users sslmode=disable timezone=UTC connect_timeout=5"
    depends_on:
      - postgres
    
  logger-service:
    build:
      context: ./../logger-service
      dockerfile: ./../logger-service/logger-service.dockerfile
    restart: always
    depends_on:
      - mongo

  mail-service:
    build:
      context: ./../mail-service
      dockerfile: ./../mail-service/mail-service.dockerfile
    restart: always
    ports:
      - "8083:80"
    environment:
      MAIL_DOMAIN: localhost
      MAIL_HOST: mailhog
      MAIL_PORT: 1025
      MAIL_USERNAME: ""
      MAIL_PASSWORD: ""
      MAIL_ENCRYPTION: none
      MAIL_FROM_ADDRESS: "mail@example.com"
      MAIL_FROM_NAME: "Your Name"
    depends_on:
      - mailhog

  listener-service:
    build:
      context: ./../listener-service
      dockerfile: ./../listener-service/listener-service.dockerfile
    restart: always
    ports:
      - "8084:80"
    depends_on:
      - rabbitmq

  postgres:
    build:
      context: .
      dockerfile: ./postgres.dockerfile
    ports: # keeping this because I'll access from my host machine with a db connection tool
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: users
    volumes:
      - ./db-data/postgres/:/var/lib/postgresql/data/

  mongo:
    image: "mongo:4.2.16-bionic"
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_DATABASE: logs
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
    volumes:
      - ./db-data/mongo/:/data/db

  mailhog:
    image: "mailhog/mailhog:latest"
    ports:
      - "1025:1025"
      - "8025:8025"

  rabbitmq:
    image: "rabbitmq:3.9-alpine"
    ports:
      - "5672:5672"
    volumes:
      - ./db-data/rabbitmq/:/var/lib/rabbitmq/

  caddy:
    build:
      context: ./
      dockerfile: ./caddy.dockerfile
    ports:
      - "80:80"
      - "444:443"
    volumes:
      - ./caddy_data:/data
      - ./caddy_config:/config

  front-end:
    build:
      context: ./../front-end
      dockerfile: ./../front-end/front-end.dockerfile
    restart: always
    environment:
      BROKER_URL: "http://backend"

volumes:
  caddy_data:
    external: true
  caddy_config: